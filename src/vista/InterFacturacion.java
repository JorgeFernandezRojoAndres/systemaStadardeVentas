package vista;

import conexion.Conexion;
import controlador.Ctrl_RegistrarVenta;
import controlador.VentaPDF;
import java.awt.Dimension;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.CabeceraVenta;
import modelo.DetalleVenta;

/**
 *
 * @author Jorge
 */
public class InterFacturacion extends javax.swing.JInternalFrame {

    //Modelo de los datos
    private DefaultTableModel modeloDatosProductos;
    //lista para el detalle de venta de los productos
    ArrayList<DetalleVenta> listaProductos = new ArrayList<>();
    private DetalleVenta producto;
    private int idCliente = 0;
    private int idProducto = 0;
    private String nombre = "";
    private int cantidadProductoBBDD = 0;
    private double precioUnitario = 0.0;
    private int porcentajeIva = 0;
    private int cantidad = 0;//cantidad de prodcutos a comprar
    private double subtotal = 0.0;//cantidad por precio
    private double descuento = 0.0;
    private double iva = 0.0;
    private double totalPagar = 0.0;
    //variables para calculos globales 
    private double subtotalGeneral = 0.0;
    private double DescuentoGeneral = 0.0;
    private double ivaGeneral = 0.0;
    private double totalaPagarGeneral = 0.0;
    //fin de variables para calculos globales
    private int auxIdDetalle = 1;//id  del detalle de venta

    public InterFacturacion() {
        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("Facturacion");
        
        //cargar los clientes en la vista - cargar producto
        
        this.CargarComboClientes();
        this.CargarComboProductos();
        this.ininicializartablaProducto();
        txt_efectivo.setEnabled(false);
        jButton1_CacularCambio.setEnabled(false);
        txt_subtotal.setText("0.0");
        txt_iva.setText("0.0");
        txt_Descuento.setText("0.0");
        txt_totalApagar.setText("0.0");
        
        //insertar imagen en nuestro Jlabel
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        jLabel1_wallpaper.setIcon(icono);
        this.repaint();
    }

    //metodo para inicializar la tabla de los productos
    private void ininicializartablaProducto() {
        modeloDatosProductos = new DefaultTableModel();
        //añadir columnas
        modeloDatosProductos.addColumn("N");
        modeloDatosProductos.addColumn("Nombre");
        modeloDatosProductos.addColumn("Cantidad");
        modeloDatosProductos.addColumn("P. Unitario");
        modeloDatosProductos.addColumn("SubTotal");
        modeloDatosProductos.addColumn("Descuento");
        modeloDatosProductos.addColumn("Iva");
        modeloDatosProductos.addColumn("Total a pagar");
        modeloDatosProductos.addColumn("Accion");
        //agregar los datos del  modelo a la tabla
        this.jTable_Productos.setModel(modeloDatosProductos);
    }

    //metodo para presentar la informacion de la tabla detalleventa
    private void listaTablaProducto() {
        this.modeloDatosProductos.setRowCount(listaProductos.size());
        for (int i = 0; i < listaProductos.size(); i++) {
            this.modeloDatosProductos.setValueAt(i + 1, i, 0);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getNombre(), i, 1);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getCantidad(), i, 2);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getPrecioUnitario(), i, 3);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getSubtotal(), i, 4);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getDescuento(), i, 5);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getIva(), i, 6);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getTotalApagar(), i, 7);
            this.modeloDatosProductos.setValueAt("Eliminar", i, 8);//aqui luego poner  un boton de eliminar
        }
        //añadir al JTable
        jTable_Productos.setModel(modeloDatosProductos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1_Cliente = new javax.swing.JComboBox<>();
        jComboBox1_Producto = new javax.swing.JComboBox<>();
        txt_ClienteBuscar = new javax.swing.JTextField();
        txt_Cantidad = new javax.swing.JTextField();
        jButton1_BuscaCliente = new javax.swing.JButton();
        jButton1_AñadirProducto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Productos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_subtotal = new javax.swing.JTextField();
        txt_Descuento = new javax.swing.JTextField();
        txt_iva = new javax.swing.JTextField();
        txt_totalApagar = new javax.swing.JTextField();
        txt_efectivo = new javax.swing.JTextField();
        txt_cambio = new javax.swing.JTextField();
        jButton1_CacularCambio = new javax.swing.JButton();
        jButton2_RegistrarVenta = new javax.swing.JButton();
        jLabel1_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Facturacion");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cliente:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Producto:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 80, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cantidad:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, 80, -1));

        jComboBox1_Cliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox1_Cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Cliente:", "Item 2", "Item 3", "Item 4" }));
        jComboBox1_Cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1_ClienteActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1_Cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 170, -1));

        jComboBox1_Producto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox1_Producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccion Producto:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox1_Producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, -1));

        txt_ClienteBuscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txt_ClienteBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 150, -1));

        txt_Cantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txt_Cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 60, -1));

        jButton1_BuscaCliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1_BuscaCliente.setText("Buscar");
        jButton1_BuscaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_BuscaClienteActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1_BuscaCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 40, 80, 28));

        jButton1_AñadirProducto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1_AñadirProducto.setText("Añadir Productos");
        jButton1_AñadirProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_AñadirProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1_AñadirProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 170, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_Productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_Productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_ProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 190));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 760, 210));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Subtotal:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Descuento:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 54, -1, -1));

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Iva:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 84, -1, -1));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Total a Pagar:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 114, -1, -1));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Efectivo:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 154, -1, -1));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Cambio:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 185, -1, -1));

        txt_subtotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_subtotal.setEnabled(false);
        txt_subtotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_subtotalActionPerformed(evt);
            }
        });
        jPanel2.add(txt_subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 120, -1));

        txt_Descuento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_Descuento.setEnabled(false);
        txt_Descuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_DescuentoActionPerformed(evt);
            }
        });
        jPanel2.add(txt_Descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 120, -1));

        txt_iva.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_iva.setEnabled(false);
        txt_iva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_ivaActionPerformed(evt);
            }
        });
        jPanel2.add(txt_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 120, -1));

        txt_totalApagar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_totalApagar.setEnabled(false);
        txt_totalApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_totalApagarActionPerformed(evt);
            }
        });
        jPanel2.add(txt_totalApagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 120, -1));

        txt_efectivo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_efectivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_efectivoActionPerformed(evt);
            }
        });
        jPanel2.add(txt_efectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 120, -1));

        txt_cambio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txt_cambio.setEnabled(false);
        txt_cambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cambioActionPerformed(evt);
            }
        });
        jPanel2.add(txt_cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, 120, -1));

        jButton1_CacularCambio.setBackground(new java.awt.Color(51, 255, 255));
        jButton1_CacularCambio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1_CacularCambio.setText("Calcular Cambio");
        jButton1_CacularCambio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_CacularCambioActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1_CacularCambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 130, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 380, 210));

        jButton2_RegistrarVenta.setBackground(new java.awt.Color(51, 255, 255));
        jButton2_RegistrarVenta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2_RegistrarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/impre_1_1.png"))); // NOI18N
        jButton2_RegistrarVenta.setText("Registrar venta");
        jButton2_RegistrarVenta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2_RegistrarVenta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2_RegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2_RegistrarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2_RegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 350, 220, 160));
        getContentPane().add(jLabel1_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 800, 580));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1_BuscaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_BuscaClienteActionPerformed

        String clienteBuscar = txt_ClienteBuscar.getText().trim();
        Connection cn = Conexion.conectar();
        String sql = "SELECT  nombre, apellido from tb_clientes where dni = '" + clienteBuscar + "'";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                jComboBox1_Cliente.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido"));                
            } else {
                jComboBox1_Cliente.setSelectedItem("seleccione cliente");
                JOptionPane.showMessageDialog(null, "Dni del cliente incorrecto o no encontrado");
            }
            txt_ClienteBuscar.setText(" ");
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al buscar cliente," + e);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1_BuscaClienteActionPerformed

    private void jButton1_AñadirProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_AñadirProductoActionPerformed

        String combo = this.jComboBox1_Producto.getSelectedItem().toString();
        //validar que seleccione un producto
        if (combo.equalsIgnoreCase("Seleccione Producto:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        } else {
            //validar que ingrese una cantidad
            if (!txt_Cantidad.getText().isEmpty()) {
                //validar que el usuario no ingrese caracteres no numericos
                boolean validacion = validar(txt_Cantidad.getText());
                if (validacion == true) {
                    //validar que la cantidad sea mayo a cero
                    if (Integer.parseInt(txt_Cantidad.getText()) > 0) {
                        cantidad = Integer.parseInt(txt_Cantidad.getText());
                        //ejecutar metodo para obtener datos del producto 
                        this.DatosDelProducto();
                        //validar  que la cantidad de productos seleccionados no sea mayor al stock de la base datos 
                        if (cantidad <= cantidadProductoBBDD) {

                            subtotal = precioUnitario * cantidad;
                            totalPagar = subtotal + iva + descuento;

                            //redondear decimales 
                            subtotal = (double) Math.round(subtotal * 100) / 100;
                            iva = (double) Math.round(iva * 100) / 100;
                            descuento = (double) Math.round(descuento * 100) / 100;
                            totalPagar = (double) Math.round(totalPagar * 100) / 100;

                            //se crea un nuevo producto
                            producto = new DetalleVenta(auxIdDetalle,// idDetalleVenta
                                    1,//idcabecera
                                    idProducto,
                                    nombre,
                                    Integer.parseInt(txt_Cantidad.getText()),
                                    precioUnitario,
                                    subtotal,
                                    descuento,
                                    iva,
                                    totalPagar,
                                    1//Estado
                            );
                            //añadir a la lista
                            listaProductos.add(producto);
                            JOptionPane.showMessageDialog(null, "Producto agregado");
                            auxIdDetalle++;
                            txt_Cantidad.setText("");//limpiar campo
                            //volver a cargar  combos productos
                            this.CargarComboClientes();
                            this.CalcularTotalPagar();
                            txt_efectivo.setEnabled(true);
                            jButton1_CacularCambio.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(null,
                                    "La cantidad supera el stock");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null,
                                "La cantidad no puede ser cero (0)ni negativa");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "En la cantidad no se admiten caracteres no numericos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "ingrese la cantidad de productos");

            }
        }
        //llamar al metodo  
        this.listaTablaProducto();
    }//GEN-LAST:event_jButton1_AñadirProductoActionPerformed

    private void txt_subtotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_subtotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_subtotalActionPerformed

    private void txt_DescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_DescuentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_DescuentoActionPerformed

    private void txt_ivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_ivaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_ivaActionPerformed

    private void txt_totalApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_totalApagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_totalApagarActionPerformed

    private void txt_efectivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_efectivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_efectivoActionPerformed

    private void txt_cambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cambioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cambioActionPerformed

    private void jButton1_CacularCambioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_CacularCambioActionPerformed

        if (!txt_efectivo.getText().isEmpty()) {
            //validamos que el usuario no ingrese otros caracteres no numericos 
            boolean validacion = validarDouble(txt_efectivo.getText());
            if (validacion == true) {
                //validar que el efectivo que ingresamos sea mayo a 0
                double eft = Double.parseDouble(txt_efectivo.getText().trim());
                double top = Double.parseDouble(txt_totalApagar.getText().trim());

                if (eft < top) {
                    JOptionPane.showMessageDialog(null, "El dinero en efectivo no es suficiente");
                } else {
                    double cambio = (eft - top);
                    double cambi = (double) Math.round(cambio * 100d) / 100;
                    String camb = String.valueOf(cambi);
                    txt_cambio.setText(camb);

                }

            } else {
                JOptionPane.showMessageDialog(null, "No se admiten caracteres no numericos");
            }

        } else {
            JOptionPane.showMessageDialog(null, "ingrese dinero en efectivo para calcular cambio");

        }
    }//GEN-LAST:event_jButton1_CacularCambioActionPerformed
    int idArrayList = 0;
    private void jTable_ProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_ProductosMouseClicked

        int fila_point = jTable_Productos.rowAtPoint(evt.getPoint());
        int columna_point = 0;

        if (fila_point > -1) {
            idArrayList = (int) modeloDatosProductos.getValueAt(fila_point, columna_point);

        }
        int opcion = JOptionPane.showConfirmDialog(null, "Estas Seguro de eliminar el producto?");
        //opciones de confir dialog -(si = 0; no = 1; cancel =2 ;close = -1)
        switch (opcion) {
            case 0: //presione si   
                listaProductos.remove(idArrayList - 1);
                this.CalcularTotalPagar();
                this.listaTablaProducto();
                break;

            case 1://presione no 
                break;
            default://sea que presione cancel(2)o  close(-1)
                break;
        }
    }//GEN-LAST:event_jTable_ProductosMouseClicked

    private void jButton2_RegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2_RegistrarVentaActionPerformed

        CabeceraVenta cabeceraVenta = new CabeceraVenta();
        DetalleVenta detalleVenta = new DetalleVenta();
        Ctrl_RegistrarVenta controlVenta = new Ctrl_RegistrarVenta();

        String fechaActual = "";
        Date date = new Date();
        fechaActual = new SimpleDateFormat("yyyy/MM/dd").format(date);

        if (!jComboBox1_Cliente.getSelectedItem().equals("Seleccion Cliente:")) {
            if (listaProductos.size() > 0) {
                //metodo para obtener el id del cliente
                this.ObtenerIdCliente();
                //registrar Cabecera
                cabeceraVenta.setIdCabeceraventa(0);
                cabeceraVenta.setIdCliente(idCliente);
                cabeceraVenta.setValorApagar(Double.parseDouble(txt_totalApagar.getText()));
                cabeceraVenta.setFechaApagar(fechaActual);
                cabeceraVenta.setEstado(1);
                
                if (controlVenta.guardar(cabeceraVenta)) {
                    JOptionPane.showMessageDialog(null, "Venta registrada");
                    
                    //generar la factura de venta 
                    
                    VentaPDF pdf = new VentaPDF();
                    pdf.DatosCliente(idCliente);
                    pdf.generarFacturaPDF();
                    
                    
                    //guardar detalle
                    for (DetalleVenta elemento : listaProductos) {
                        detalleVenta.setIdDetalleDeVenta(0);
                        detalleVenta.setIdcabeceraDeVenta(0);
                        detalleVenta.setIdProducto(elemento.getIdProducto());
                        detalleVenta.setCantidad(elemento.getCantidad());
                        detalleVenta.setPrecioUnitario(elemento.getPrecioUnitario());
                        detalleVenta.setSubtotal(elemento.getSubtotal());
                        detalleVenta.setIva(elemento.getIva());
                        detalleVenta.setTotalApagar(elemento.getTotalApagar());
                        detalleVenta.setEstado(1);
                        if (controlVenta.guardarDetalle(detalleVenta)) {
                            //System.out.println("Detalle de venta Registrado");

                            txt_subtotal.setText("0.0");
                            txt_iva.setText("0.0");
                            txt_Descuento.setText("0.0");
                            txt_totalApagar.setText("0.0");
                            txt_efectivo.setText("0.0");
                            txt_cambio.setText("0.0");
                            auxIdDetalle = 1;

                            this.CargarComboClientes();
                            this.RestarStookProductos(elemento.getIdProducto(), elemento.getCantidad());

                        } else {
                            JOptionPane.showMessageDialog(null, "error al guardar Detalle de venta");
                        }
                    }
                    //vaciamos la lista
                    listaProductos.clear();
                    listaTablaProducto();
                } else {
                    JOptionPane.showMessageDialog(null, "error al guardar cabecera de venta");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Seleccione un cliente");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un Producto");
        }
    }//GEN-LAST:event_jButton2_RegistrarVentaActionPerformed

    private void jComboBox1_ClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1_ClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1_ClienteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1_AñadirProducto;
    private javax.swing.JButton jButton1_BuscaCliente;
    private javax.swing.JButton jButton1_CacularCambio;
    private javax.swing.JButton jButton2_RegistrarVenta;
    public static javax.swing.JComboBox<String> jComboBox1_Cliente;
    private javax.swing.JComboBox<String> jComboBox1_Producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel1_wallpaper;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_Productos;
    private javax.swing.JTextField txt_Cantidad;
    public static javax.swing.JTextField txt_ClienteBuscar;
    private javax.swing.JTextField txt_Descuento;
    private javax.swing.JTextField txt_cambio;
    private javax.swing.JTextField txt_efectivo;
    private javax.swing.JTextField txt_iva;
    private javax.swing.JTextField txt_subtotal;
    public static javax.swing.JTextField txt_totalApagar;
    // End of variables declaration//GEN-END:variables
//metodo para cargar clientes en el jcombobox

    private void CargarComboClientes() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_clientes";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox1_Cliente.removeAllItems();
            jComboBox1_Cliente.addItem("Seleccione Cliente:");
            while (rs.next()) {
                jComboBox1_Cliente.addItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.print("Error al cargar el cliente," + e);

        }

    }
    //metodos para cargar  los productos en el JcomboBox

    private void CargarComboProductos() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_producto";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox1_Producto.removeAllItems();
            jComboBox1_Producto.addItem("Seleccione producto");
            while (rs.next()) {
                jComboBox1_Producto.addItem(rs.getString("nombre"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.print("Error al cargar Productos" + e);

        }

    }

    //metodo  para validar que el usuario no ingrese  caracteres no numericos
    private boolean validar(String valor) {
        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    //metodo  para validar que el usuario no ingrese  caracteres no numericos

    private boolean validarDouble(String valor) {
        try {
            double num = Double.parseDouble(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    // Metodo para mostrar los datos del producto seleccionado

    private void DatosDelProducto() {
        try {
            String sql = "select * from tb_producto where nombre = '" + this.jComboBox1_Producto.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idProducto = rs.getInt("idProducto");
                nombre = rs.getString("nombre");
                cantidadProductoBBDD = rs.getInt("cantidad");
                precioUnitario = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");
                this.calcularIva(precioUnitario, porcentajeIva);//calcula  y retorna iva
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener datos del producto, " + e);
        }
    }
    //metodo para calcular iva 

    private double calcularIva(double precio, int porcentajeIva) {
        int p_iva = porcentajeIva;
        switch (p_iva) {

            case 0:
                iva = 0.0;
                break;
            case 12:
                iva = (precio * cantidad) * 0.12;
                break;
            case 14:
                iva = (precio * cantidad) * 0.14;
                break;
            default:
                break;
        }
        return iva;
    }

    //metodo para calcular total a pagar  de todos los productos agregados 
    private void CalcularTotalPagar() {
        subtotalGeneral = 0;
        DescuentoGeneral = 0;
        ivaGeneral = 0;
        totalaPagarGeneral = 0;

        for (DetalleVenta elemento : listaProductos) {
            subtotalGeneral += elemento.getSubtotal();
            DescuentoGeneral += elemento.getDescuento();
            ivaGeneral += elemento.getIva();
            totalaPagarGeneral += elemento.getTotalApagar();

        }
        //redondiar decimales 
        subtotalGeneral = (double) Math.round(subtotalGeneral * 100) / 100;
        ivaGeneral = (double) Math.round(ivaGeneral * 100) / 100;
        DescuentoGeneral = (double) Math.round(DescuentoGeneral * 100) / 100;
        totalaPagarGeneral = (double) Math.round(totalaPagarGeneral * 100) / 100;

        //enviar datos a la vista
        txt_subtotal.setText(String.valueOf(subtotalGeneral));
        txt_iva.setText(String.valueOf(ivaGeneral));
        txt_Descuento.setText(String.valueOf(DescuentoGeneral));
        txt_totalApagar.setText(String.valueOf(totalaPagarGeneral));

    }

    //Metodo para obtener id del cliente
    private void ObtenerIdCliente() {
        try {
            String sql = "select * from tb_clientes where concat(nombre,' ',apellido) = '" + this.jComboBox1_Cliente.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idCliente = rs.getInt("idCliente");

            }

        } catch (SQLException e) {
            System.out.println("Erro al obtener id del cliente " + e);
        }

    }

    //metodo para  restar  la cantidad (stock) de los prodcutos 
    private void RestarStookProductos(int idProducto, int cantidad) {

        int cantidadProductoBaseDeDatos = 0;
        try {
            Connection cn = Conexion.conectar();
            String sql = "select  idProducto,cantidad from tb_producto where idProducto = '" + idProducto + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cantidadProductoBaseDeDatos = rs.getInt("cantidad");
            }
            cn.close();
        } catch (SQLException e) {

            System.out.println("Error al restar la cantidad 1," + e);
        }
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement consulta = (PreparedStatement) cn.prepareStatement("update tb_producto set cantidad=? where idProducto = '" + idProducto + "'");
            int cantidadNueva = cantidadProductoBaseDeDatos - cantidad;
            consulta.setInt(1, cantidadNueva);
            if (consulta.executeUpdate() > 0) {
                System.out.println("Todo Bien");
            }
        } catch (SQLException e) {
            System.out.println("Error al restar cantidad 2," + e);
        }
    }

}
